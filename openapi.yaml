openapi: 3.1.1
info:
  title: API First
  version: 1.0.0
  description: API First is a simple API that allows you to create, read, update and delete users.
servers:
  - url: http://localhost:3000

paths:
  /hello:
    get:
      summary: hello world
      responses:
        '200':
          description: A success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
  
  /users:
    post:
      summary: Crear un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - age
                - email
              properties:
                name:
                  type: string
                  minLength: 2
                age:
                  type: integer
                  minimum: 18
                email:
                  type: string
                  format: email
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
  
  /users/{id}:
    get:
      summary: Obtener un usuario por id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario encontrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    
    put:
      summary: Actualizar un usuario por id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - age
                - email
              properties:
                name:
                  type: string
                  minLength: 2
                age:
                  type: integer
                  minimum: 18
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /products:
    post:
      summary: Crear un nuevo producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

  /products/{id}:
    put:
      summary: Actualizar un producto por id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      summary: Eliminar un producto por id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Producto eliminado exitosamente
        '404':
          description: Producto no encontrado

components:
  schemas:
    HelloResponse:
      type: object
      properties:
        message:
          type: string
          example: Hello World
    
    Product:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 40
        description:
          type: string
          maxLength: 500
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
        category:
          type: string
          enum: [electronics, books, clothes, food]
        tags:
          type: array
          items:
            type: string
          minItems: 1
        inStock:
          type: boolean
        specifications:
          type: object
          additionalProperties:
            type: string
        ratings:
          type: array
          items:
            type: object
            required:
              - score
              - comment
            properties:
              score:
                type: integer
                minimum: 1
                maximum: 5
              comment:
                type: string
                maxLength: 200
    
    ProductResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: string
        tags:
          type: array
          items:
            type: string
        inStock:
          type: boolean
        specifications:
          type: object
          additionalProperties:
            type: string
        ratings:
          type: array
          items:
            type: object
            properties:
              score:
                type: integer
              comment:
                type: string